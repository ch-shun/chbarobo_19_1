
0925_03_warikomi4_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003824  08003824  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003824  08003824  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003824  08003824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003838  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003838  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b05  00000000  00000000  0002fb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  00032138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018216  00000000  00000000  00032b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e7c  00000000  00000000  0004ad7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086e17  00000000  00000000  00053bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000daa11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  000daa8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037d4 	.word	0x080037d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037d4 	.word	0x080037d4

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f949 	bl	8000470 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 ff82 	bl	80030ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f961 	bl	80004da <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f929 	bl	8000486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 021f 	and.w	r2, r3, #31
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <NVIC_EnableIRQ+0x30>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	095b      	lsrs	r3, r3, #5
 8000354:	2001      	movs	r0, #1
 8000356:	fa00 f202 	lsl.w	r2, r0, r2
 800035a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e100 	.word	0xe000e100

08000370 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	da0b      	bge.n	800039c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <NVIC_SetPriority+0x4c>)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f003 030f 	and.w	r3, r3, #15
 8000390:	3b04      	subs	r3, #4
 8000392:	0112      	lsls	r2, r2, #4
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	440b      	add	r3, r1
 8000398:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800039a:	e009      	b.n	80003b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <NVIC_SetPriority+0x50>)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	0112      	lsls	r2, r2, #4
 80003a8:	b2d2      	uxtb	r2, r2
 80003aa:	440b      	add	r3, r1
 80003ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	; 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0307 	and.w	r3, r3, #7
 80003d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	f1c3 0307 	rsb	r3, r3, #7
 80003de:	2b04      	cmp	r3, #4
 80003e0:	bf28      	it	cs
 80003e2:	2304      	movcs	r3, #4
 80003e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3304      	adds	r3, #4
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d902      	bls.n	80003f4 <NVIC_EncodePriority+0x30>
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3b03      	subs	r3, #3
 80003f2:	e000      	b.n	80003f6 <NVIC_EncodePriority+0x32>
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	43da      	mvns	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	401a      	ands	r2, r3
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43d9      	mvns	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	4313      	orrs	r3, r2
         );
}
 800041e:	4618      	mov	r0, r3
 8000420:	3724      	adds	r7, #36	; 0x24
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800043c:	d301      	bcc.n	8000442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043e:	2301      	movs	r3, #1
 8000440:	e00f      	b.n	8000462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <SysTick_Config+0x40>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044a:	210f      	movs	r1, #15
 800044c:	f04f 30ff 	mov.w	r0, #4294967295
 8000450:	f7ff ff8e 	bl	8000370 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <SysTick_Config+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <SysTick_Config+0x40>)
 800045c:	2207      	movs	r2, #7
 800045e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	e000e010 	.word	0xe000e010

08000470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff2d 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000498:	f7ff ff42 	bl	8000320 <NVIC_GetPriorityGrouping>
 800049c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	6978      	ldr	r0, [r7, #20]
 80004a4:	f7ff ff8e 	bl	80003c4 <NVIC_EncodePriority>
 80004a8:	4602      	mov	r2, r0
 80004aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff5d 	bl	8000370 <NVIC_SetPriority>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4603      	mov	r3, r0
 80004c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff35 	bl	800033c <NVIC_EnableIRQ>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ffa2 	bl	800042c <SysTick_Config>
 80004e8:	4603      	mov	r3, r0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800050a:	e14e      	b.n	80007aa <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	2101      	movs	r1, #1
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	4013      	ands	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 8140 	beq.w	80007a4 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d003      	beq.n	8000534 <HAL_GPIO_Init+0x40>
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b12      	cmp	r3, #18
 8000532:	d123      	bne.n	800057c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	08da      	lsrs	r2, r3, #3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3208      	adds	r2, #8
 800053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000540:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	f003 0307 	and.w	r3, r3, #7
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	220f      	movs	r2, #15
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	691a      	ldr	r2, [r3, #16]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	4313      	orrs	r3, r2
 800056c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	08da      	lsrs	r2, r3, #3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3208      	adds	r2, #8
 8000576:	6939      	ldr	r1, [r7, #16]
 8000578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 0203 	and.w	r2, r3, #3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d00b      	beq.n	80005d0 <HAL_GPIO_Init+0xdc>
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d007      	beq.n	80005d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c4:	2b11      	cmp	r3, #17
 80005c6:	d003      	beq.n	80005d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b12      	cmp	r3, #18
 80005ce:	d130      	bne.n	8000632 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2203      	movs	r2, #3
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000606:	2201      	movs	r2, #1
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4013      	ands	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	f003 0201 	and.w	r2, r3, #1
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4313      	orrs	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2203      	movs	r2, #3
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4313      	orrs	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	2b00      	cmp	r3, #0
 800066c:	f000 809a 	beq.w	80007a4 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000670:	4b55      	ldr	r3, [pc, #340]	; (80007c8 <HAL_GPIO_Init+0x2d4>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a54      	ldr	r2, [pc, #336]	; (80007c8 <HAL_GPIO_Init+0x2d4>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <HAL_GPIO_Init+0x2d4>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000688:	4a50      	ldr	r2, [pc, #320]	; (80007cc <HAL_GPIO_Init+0x2d8>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	3302      	adds	r3, #2
 8000690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000694:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f003 0303 	and.w	r3, r3, #3
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	220f      	movs	r2, #15
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	4013      	ands	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006b2:	d013      	beq.n	80006dc <HAL_GPIO_Init+0x1e8>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a46      	ldr	r2, [pc, #280]	; (80007d0 <HAL_GPIO_Init+0x2dc>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d00d      	beq.n	80006d8 <HAL_GPIO_Init+0x1e4>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <HAL_GPIO_Init+0x2e0>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d007      	beq.n	80006d4 <HAL_GPIO_Init+0x1e0>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a44      	ldr	r2, [pc, #272]	; (80007d8 <HAL_GPIO_Init+0x2e4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d101      	bne.n	80006d0 <HAL_GPIO_Init+0x1dc>
 80006cc:	2303      	movs	r3, #3
 80006ce:	e006      	b.n	80006de <HAL_GPIO_Init+0x1ea>
 80006d0:	2305      	movs	r3, #5
 80006d2:	e004      	b.n	80006de <HAL_GPIO_Init+0x1ea>
 80006d4:	2302      	movs	r3, #2
 80006d6:	e002      	b.n	80006de <HAL_GPIO_Init+0x1ea>
 80006d8:	2301      	movs	r3, #1
 80006da:	e000      	b.n	80006de <HAL_GPIO_Init+0x1ea>
 80006dc:	2300      	movs	r3, #0
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	f002 0203 	and.w	r2, r2, #3
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	4093      	lsls	r3, r2
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006ee:	4937      	ldr	r1, [pc, #220]	; (80007cc <HAL_GPIO_Init+0x2d8>)
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	3302      	adds	r3, #2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	43db      	mvns	r3, r3
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4313      	orrs	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	43db      	mvns	r3, r3
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	4013      	ands	r3, r2
 8000734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	43db      	mvns	r3, r3
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4313      	orrs	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	43db      	mvns	r3, r3
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	4013      	ands	r3, r2
 8000788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4313      	orrs	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_GPIO_Init+0x2e8>)
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3301      	adds	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f47f aea9 	bne.w	800050c <HAL_GPIO_Init+0x18>
  }
}
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000
 80007d0:	48000400 	.word	0x48000400
 80007d4:	48000800 	.word	0x48000800
 80007d8:	48000c00 	.word	0x48000c00
 80007dc:	40010400 	.word	0x40010400

080007e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
 80007ec:	4613      	mov	r3, r2
 80007ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007f0:	787b      	ldrb	r3, [r7, #1]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007f6:	887a      	ldrh	r2, [r7, #2]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007fc:	e002      	b.n	8000804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007fe:	887a      	ldrh	r2, [r7, #2]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	4013      	ands	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f806 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010400 	.word	0x40010400

08000840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800085e:	af00      	add	r7, sp, #0
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	f000 beda 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	f000 816e 	beq.w	8000b5e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000882:	4bb5      	ldr	r3, [pc, #724]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f003 030c 	and.w	r3, r3, #12
 800088a:	2b04      	cmp	r3, #4
 800088c:	d00c      	beq.n	80008a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800088e:	4bb2      	ldr	r3, [pc, #712]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b08      	cmp	r3, #8
 8000898:	d15a      	bne.n	8000950 <HAL_RCC_OscConfig+0xf8>
 800089a:	4baf      	ldr	r3, [pc, #700]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a6:	d153      	bne.n	8000950 <HAL_RCC_OscConfig+0xf8>
 80008a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80008b4:	fa93 f3a3 	rbit	r3, r3
 80008b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008c0:	fab3 f383 	clz	r3, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d102      	bne.n	80008da <HAL_RCC_OscConfig+0x82>
 80008d4:	4ba0      	ldr	r3, [pc, #640]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	e015      	b.n	8000906 <HAL_RCC_OscConfig+0xae>
 80008da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80008e6:	fa93 f3a3 	rbit	r3, r3
 80008ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80008ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80008f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80008fa:	fa93 f3a3 	rbit	r3, r3
 80008fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000902:	4b95      	ldr	r3, [pc, #596]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800090a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800090e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000912:	fa92 f2a2 	rbit	r2, r2
 8000916:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800091a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	b252      	sxtb	r2, r2
 8000924:	f042 0220 	orr.w	r2, r2, #32
 8000928:	b252      	sxtb	r2, r2
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	f002 021f 	and.w	r2, r2, #31
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	4013      	ands	r3, r2
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 810f 	beq.w	8000b5c <HAL_RCC_OscConfig+0x304>
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 8109 	bne.w	8000b5c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	f000 be6b 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095a:	d106      	bne.n	800096a <HAL_RCC_OscConfig+0x112>
 800095c:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a7d      	ldr	r2, [pc, #500]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e030      	b.n	80009cc <HAL_RCC_OscConfig+0x174>
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10c      	bne.n	800098e <HAL_RCC_OscConfig+0x136>
 8000974:	4b78      	ldr	r3, [pc, #480]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a77      	ldr	r2, [pc, #476]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 800097a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b75      	ldr	r3, [pc, #468]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a74      	ldr	r2, [pc, #464]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e01e      	b.n	80009cc <HAL_RCC_OscConfig+0x174>
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000998:	d10c      	bne.n	80009b4 <HAL_RCC_OscConfig+0x15c>
 800099a:	4b6f      	ldr	r3, [pc, #444]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a6e      	ldr	r2, [pc, #440]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a6b      	ldr	r2, [pc, #428]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e00b      	b.n	80009cc <HAL_RCC_OscConfig+0x174>
 80009b4:	4b68      	ldr	r3, [pc, #416]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a67      	ldr	r2, [pc, #412]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a64      	ldr	r2, [pc, #400]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009cc:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	f023 020f 	bic.w	r2, r3, #15
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	495f      	ldr	r1, [pc, #380]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 80009dc:	4313      	orrs	r3, r2
 80009de:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d05a      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ea:	f7ff fc47 	bl	800027c <HAL_GetTick>
 80009ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f2:	e00a      	b.n	8000a0a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f4:	f7ff fc42 	bl	800027c <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b64      	cmp	r3, #100	; 0x64
 8000a02:	d902      	bls.n	8000a0a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a04:	2303      	movs	r3, #3
 8000a06:	f000 be0e 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
 8000a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a0e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a12:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a16:	fa93 f3a3 	rbit	r3, r3
 8000a1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a22:	fab3 f383 	clz	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	095b      	lsrs	r3, r3, #5
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <HAL_RCC_OscConfig+0x1e4>
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	e015      	b.n	8000a68 <HAL_RCC_OscConfig+0x210>
 8000a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a40:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a44:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a48:	fa93 f3a3 	rbit	r3, r3
 8000a4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000a58:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000a5c:	fa93 f3a3 	rbit	r3, r3
 8000a60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000a70:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a74:	fa92 f2a2 	rbit	r2, r2
 8000a78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	b252      	sxtb	r2, r2
 8000a86:	f042 0220 	orr.w	r2, r2, #32
 8000a8a:	b252      	sxtb	r2, r2
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	f002 021f 	and.w	r2, r2, #31
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0aa      	beq.n	80009f4 <HAL_RCC_OscConfig+0x19c>
 8000a9e:	e05e      	b.n	8000b5e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fbec 	bl	800027c <HAL_GetTick>
 8000aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fbe7 	bl	800027c <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d902      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	f000 bdb3 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
 8000ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000acc:	fa93 f3a3 	rbit	r3, r3
 8000ad0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000ad4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d102      	bne.n	8000af2 <HAL_RCC_OscConfig+0x29a>
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	e015      	b.n	8000b1e <HAL_RCC_OscConfig+0x2c6>
 8000af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000afe:	fa93 f3a3 	rbit	r3, r3
 8000b02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b12:	fa93 f3a3 	rbit	r3, r3
 8000b16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_RCC_OscConfig+0x300>)
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b2a:	fa92 f2a2 	rbit	r2, r2
 8000b2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	b252      	sxtb	r2, r2
 8000b3c:	f042 0220 	orr.w	r2, r2, #32
 8000b40:	b252      	sxtb	r2, r2
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	f002 021f 	and.w	r2, r2, #31
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1aa      	bne.n	8000aaa <HAL_RCC_OscConfig+0x252>
 8000b54:	e003      	b.n	8000b5e <HAL_RCC_OscConfig+0x306>
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 8170 	beq.w	8000e4e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b6e:	4bd0      	ldr	r3, [pc, #832]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 030c 	and.w	r3, r3, #12
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00b      	beq.n	8000b92 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b7a:	4bcd      	ldr	r3, [pc, #820]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d16d      	bne.n	8000c62 <HAL_RCC_OscConfig+0x40a>
 8000b86:	4bca      	ldr	r3, [pc, #808]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d167      	bne.n	8000c62 <HAL_RCC_OscConfig+0x40a>
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b9c:	fa93 f3a3 	rbit	r3, r3
 8000ba0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000ba4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d102      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x36a>
 8000bbc:	4bbc      	ldr	r3, [pc, #752]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	e013      	b.n	8000bea <HAL_RCC_OscConfig+0x392>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000bda:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000bde:	fa93 f3a3 	rbit	r3, r3
 8000be2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000be6:	4bb2      	ldr	r3, [pc, #712]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	2202      	movs	r2, #2
 8000bec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000bf0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000bf4:	fa92 f2a2 	rbit	r2, r2
 8000bf8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000bfc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b252      	sxtb	r2, r2
 8000c06:	f042 0220 	orr.w	r2, r2, #32
 8000c0a:	b252      	sxtb	r2, r2
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	f002 021f 	and.w	r2, r2, #31
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <HAL_RCC_OscConfig+0x3d6>
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d002      	beq.n	8000c2e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f000 bcfc 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2e:	4ba0      	ldr	r3, [pc, #640]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6959      	ldr	r1, [r3, #20]
 8000c3c:	23f8      	movs	r3, #248	; 0xf8
 8000c3e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c42:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000c46:	fa93 f3a3 	rbit	r3, r3
 8000c4a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000c4e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000c52:	fab3 f383 	clz	r3, r3
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	4995      	ldr	r1, [pc, #596]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c60:	e0f5      	b.n	8000e4e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 8085 	beq.w	8000d78 <HAL_RCC_OscConfig+0x520>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c74:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c78:	fa93 f3a3 	rbit	r3, r3
 8000c7c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000c80:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	461a      	mov	r2, r3
 8000c94:	2301      	movs	r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff faf0 	bl	800027c <HAL_GetTick>
 8000c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e00a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff faeb 	bl	800027c <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d902      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f000 bcb7 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000cca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	fab3 f383 	clz	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	095b      	lsrs	r3, r3, #5
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x490>
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	e013      	b.n	8000d10 <HAL_RCC_OscConfig+0x4b8>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d00:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d0c:	4b68      	ldr	r3, [pc, #416]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	2202      	movs	r2, #2
 8000d12:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d16:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d1a:	fa92 f2a2 	rbit	r2, r2
 8000d1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	b252      	sxtb	r2, r2
 8000d2c:	f042 0220 	orr.w	r2, r2, #32
 8000d30:	b252      	sxtb	r2, r2
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	f002 021f 	and.w	r2, r2, #31
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0ae      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4b5a      	ldr	r3, [pc, #360]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6959      	ldr	r1, [r3, #20]
 8000d52:	23f8      	movs	r3, #248	; 0xf8
 8000d54:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d58:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000d64:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	494f      	ldr	r1, [pc, #316]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]
 8000d76:	e06a      	b.n	8000e4e <HAL_RCC_OscConfig+0x5f6>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000d8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2300      	movs	r3, #0
 8000da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fa6b 	bl	800027c <HAL_GetTick>
 8000da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	e00a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fa66 	bl	800027c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d902      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f000 bc32 	b.w	8001626 <HAL_RCC_OscConfig+0xdce>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000dd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x59a>
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	e013      	b.n	8000e1a <HAL_RCC_OscConfig+0x5c2>
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_RCC_OscConfig+0x658>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e20:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e24:	fa92 f2a2 	rbit	r2, r2
 8000e28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	b252      	sxtb	r2, r2
 8000e36:	f042 0220 	orr.w	r2, r2, #32
 8000e3a:	b252      	sxtb	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f002 021f 	and.w	r2, r2, #31
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1ae      	bne.n	8000dac <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80d8 	beq.w	800100e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d067      	beq.n	8000f38 <HAL_RCC_OscConfig+0x6e0>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_RCC_OscConfig+0x65c>)
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff f9f4 	bl	800027c <HAL_GetTick>
 8000e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	e00e      	b.n	8000eb8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff f9ef 	bl	800027c <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d906      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e3bb      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	10908120 	.word	0x10908120
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ed4:	fa93 f2a3 	rbit	r2, r3
 8000ed8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	fa93 f2a3 	rbit	r2, r3
 8000ef0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ef4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4ba5      	ldr	r3, [pc, #660]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8000ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000efe:	2102      	movs	r1, #2
 8000f00:	6019      	str	r1, [r3, #0]
 8000f02:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	fa93 f1a3 	rbit	r1, r3
 8000f0c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f10:	6019      	str	r1, [r3, #0]
  return(result);
 8000f12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0b1      	beq.n	8000e9a <HAL_RCC_OscConfig+0x642>
 8000f36:	e06a      	b.n	800100e <HAL_RCC_OscConfig+0x7b6>
 8000f38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	fa93 f2a3 	rbit	r2, r3
 8000f4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f4e:	601a      	str	r2, [r3, #0]
  return(result);
 8000f50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <HAL_RCC_OscConfig+0x938>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	461a      	mov	r2, r3
 8000f64:	2300      	movs	r3, #0
 8000f66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff f988 	bl	800027c <HAL_GetTick>
 8000f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	e009      	b.n	8000f86 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff f983 	bl	800027c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e34f      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 8000f86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	fa93 f2a3 	rbit	r2, r3
 8000f98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	fa93 f2a3 	rbit	r2, r3
 8000fb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fba:	2202      	movs	r2, #2
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	fa93 f2a3 	rbit	r2, r3
 8000fc8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fce:	4b6f      	ldr	r3, [pc, #444]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8000fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	6019      	str	r1, [r3, #0]
 8000fda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	fa93 f1a3 	rbit	r1, r3
 8000fe4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fe8:	6019      	str	r1, [r3, #0]
  return(result);
 8000fea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1b1      	bne.n	8000f72 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 8159 	beq.w	80012d0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001024:	4b59      	ldr	r3, [pc, #356]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d112      	bne.n	8001056 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	4a55      	ldr	r2, [pc, #340]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	61d3      	str	r3, [r2, #28]
 800103c:	4b53      	ldr	r3, [pc, #332]	; (800118c <HAL_RCC_OscConfig+0x934>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001050:	2301      	movs	r3, #1
 8001052:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_RCC_OscConfig+0x93c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d11a      	bne.n	8001098 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x93c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_RCC_OscConfig+0x93c>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106e:	f7ff f905 	bl	800027c <HAL_GetTick>
 8001072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	e009      	b.n	800108c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001078:	f7ff f900 	bl	800027c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	; 0x64
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e2cc      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_RCC_OscConfig+0x93c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ef      	beq.n	8001078 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x858>
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a39      	ldr	r2, [pc, #228]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	e02f      	b.n	8001110 <HAL_RCC_OscConfig+0x8b8>
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x87c>
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0x8b8>
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b05      	cmp	r3, #5
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x8a0>
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a27      	ldr	r2, [pc, #156]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0x8b8>
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_RCC_OscConfig+0x934>)
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <HAL_RCC_OscConfig+0x934>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d06b      	beq.n	80011f2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff f8af 	bl	800027c <HAL_GetTick>
 800111e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001124:	f7ff f8aa 	bl	800027c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	; 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e274      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 800113c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001140:	2202      	movs	r2, #2
 8001142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	fa93 f2a3 	rbit	r2, r3
 800114e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	fa93 f2a3 	rbit	r2, r3
 8001166:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800116a:	601a      	str	r2, [r3, #0]
  return(result);
 800116c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001170:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d108      	bne.n	8001198 <HAL_RCC_OscConfig+0x940>
 8001186:	4b01      	ldr	r3, [pc, #4]	; (800118c <HAL_RCC_OscConfig+0x934>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	e013      	b.n	80011b4 <HAL_RCC_OscConfig+0x95c>
 800118c:	40021000 	.word	0x40021000
 8001190:	10908120 	.word	0x10908120
 8001194:	40007000 	.word	0x40007000
 8001198:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800119c:	2202      	movs	r2, #2
 800119e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	fa93 f2a3 	rbit	r2, r3
 80011aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4bbb      	ldr	r3, [pc, #748]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011b8:	2102      	movs	r1, #2
 80011ba:	6011      	str	r1, [r2, #0]
 80011bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	fa92 f1a2 	rbit	r1, r2
 80011c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011ca:	6011      	str	r1, [r2, #0]
  return(result);
 80011cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	b252      	sxtb	r2, r2
 80011d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011dc:	b252      	sxtb	r2, r2
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f002 021f 	and.w	r2, r2, #31
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d099      	beq.n	8001124 <HAL_RCC_OscConfig+0x8cc>
 80011f0:	e064      	b.n	80012bc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff f843 	bl	800027c <HAL_GetTick>
 80011f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7ff f83e 	bl	800027c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e208      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 8001214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	fa93 f2a3 	rbit	r2, r3
 8001226:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fa93 f2a3 	rbit	r2, r3
 800123e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001242:	601a      	str	r2, [r3, #0]
  return(result);
 8001244:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001248:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0xa0c>
 800125e:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	e00d      	b.n	8001280 <HAL_RCC_OscConfig+0xa28>
 8001264:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fa93 f2a3 	rbit	r2, r3
 8001276:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001284:	2102      	movs	r1, #2
 8001286:	6011      	str	r1, [r2, #0]
 8001288:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	fa92 f1a2 	rbit	r1, r2
 8001292:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001296:	6011      	str	r1, [r2, #0]
  return(result);
 8001298:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	b252      	sxtb	r2, r2
 80012a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a8:	b252      	sxtb	r2, r2
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f002 021f 	and.w	r2, r2, #31
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d19f      	bne.n	80011fc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c4:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	4a75      	ldr	r2, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80012ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 81a4 	beq.w	8001624 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	f000 819b 	beq.w	8001620 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	f040 8113 	bne.w	800151c <HAL_RCC_OscConfig+0xcc4>
 80012f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	fa93 f2a3 	rbit	r2, r3
 800130a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800130e:	601a      	str	r2, [r3, #0]
  return(result);
 8001310:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001314:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800131e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	2300      	movs	r3, #0
 8001328:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7fe ffa7 	bl	800027c <HAL_GetTick>
 800132e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	e009      	b.n	8001348 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7fe ffa2 	bl	800027c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e16e      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 8001348:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800134c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fa93 f2a3 	rbit	r2, r3
 800135c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001360:	601a      	str	r2, [r3, #0]
  return(result);
 8001362:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001366:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <HAL_RCC_OscConfig+0xb2a>
 800137c:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e01b      	b.n	80013ba <HAL_RCC_OscConfig+0xb62>
 8001382:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800138a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013c2:	6011      	str	r1, [r2, #0]
 80013c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	fa92 f1a2 	rbit	r1, r2
 80013ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013d2:	6011      	str	r1, [r2, #0]
  return(result);
 80013d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	fab2 f282 	clz	r2, r2
 80013de:	b252      	sxtb	r2, r2
 80013e0:	f042 0220 	orr.w	r2, r2, #32
 80013e4:	b252      	sxtb	r2, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f002 021f 	and.w	r2, r2, #31
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f202 	lsl.w	r2, r1, r2
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d19d      	bne.n	8001334 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	430b      	orrs	r3, r1
 800140e:	4924      	ldr	r1, [pc, #144]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800141c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800142c:	601a      	str	r2, [r3, #0]
  return(result);
 800142e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001432:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	461a      	mov	r2, r3
 8001444:	2301      	movs	r3, #1
 8001446:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7fe ff18 	bl	800027c <HAL_GetTick>
 800144c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001450:	e009      	b.n	8001466 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001452:	f7fe ff13 	bl	800027c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0df      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 8001466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800146a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800146e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800147e:	601a      	str	r2, [r3, #0]
  return(result);
 8001480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001484:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d104      	bne.n	80014a4 <HAL_RCC_OscConfig+0xc4c>
 800149a:	4b01      	ldr	r3, [pc, #4]	; (80014a0 <HAL_RCC_OscConfig+0xc48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xc84>
 80014a0:	40021000 	.word	0x40021000
 80014a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f2a3 	rbit	r2, r3
 80014b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <HAL_RCC_OscConfig+0xdd8>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014e4:	6011      	str	r1, [r2, #0]
 80014e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	fa92 f1a2 	rbit	r1, r2
 80014f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014f4:	6011      	str	r1, [r2, #0]
  return(result);
 80014f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	fab2 f282 	clz	r2, r2
 8001500:	b252      	sxtb	r2, r2
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	b252      	sxtb	r2, r2
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d09b      	beq.n	8001452 <HAL_RCC_OscConfig+0xbfa>
 800151a:	e083      	b.n	8001624 <HAL_RCC_OscConfig+0xdcc>
 800151c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001534:	601a      	str	r2, [r3, #0]
  return(result);
 8001536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001544:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	461a      	mov	r2, r3
 800154c:	2300      	movs	r3, #0
 800154e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7fe fe94 	bl	800027c <HAL_GetTick>
 8001554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001558:	e009      	b.n	800156e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7fe fe8f 	bl	800027c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e05b      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
 800156e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	601a      	str	r2, [r3, #0]
  return(result);
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	095b      	lsrs	r3, r3, #5
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_OscConfig+0xd50>
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_RCC_OscConfig+0xdd8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	e01b      	b.n	80015e0 <HAL_RCC_OscConfig+0xd88>
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_RCC_OscConfig+0xdd8>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f107 0214 	add.w	r2, r7, #20
 80015e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015e8:	6011      	str	r1, [r2, #0]
 80015ea:	f107 0214 	add.w	r2, r7, #20
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	fa92 f1a2 	rbit	r1, r2
 80015f4:	f107 0210 	add.w	r2, r7, #16
 80015f8:	6011      	str	r1, [r2, #0]
  return(result);
 80015fa:	f107 0210 	add.w	r2, r7, #16
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	fab2 f282 	clz	r2, r2
 8001604:	b252      	sxtb	r2, r2
 8001606:	f042 0220 	orr.w	r2, r2, #32
 800160a:	b252      	sxtb	r2, r2
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	f002 021f 	and.w	r2, r2, #31
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d19d      	bne.n	800155a <HAL_RCC_OscConfig+0xd02>
 800161e:	e001      	b.n	8001624 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09e      	sub	sp, #120	; 0x78
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e164      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	498d      	ldr	r1, [pc, #564]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e14c      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4981      	ldr	r1, [pc, #516]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80df 	beq.w	8001866 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d13d      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
 80016b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80016be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_RCC_ClockConfig+0xa6>
 80016d4:	4b71      	ldr	r3, [pc, #452]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	e00f      	b.n	80016fa <HAL_RCC_ClockConfig+0xc6>
 80016da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	667b      	str	r3, [r7, #100]	; 0x64
 80016e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ec:	663b      	str	r3, [r7, #96]	; 0x60
 80016ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016f6:	4b69      	ldr	r3, [pc, #420]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8001700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001702:	fa92 f2a2 	rbit	r2, r2
 8001706:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b252      	sxtb	r2, r2
 8001710:	f042 0220 	orr.w	r2, r2, #32
 8001714:	b252      	sxtb	r2, r2
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d17d      	bne.n	8001824 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0f4      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d13d      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x17c>
 8001734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001738:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <HAL_RCC_ClockConfig+0x12a>
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e00f      	b.n	800177e <HAL_RCC_ClockConfig+0x14a>
 800175e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001770:	643b      	str	r3, [r7, #64]	; 0x40
 8001772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177a:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001782:	63ba      	str	r2, [r7, #56]	; 0x38
 8001784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800178c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	b252      	sxtb	r2, r2
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	b252      	sxtb	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f002 021f 	and.w	r2, r2, #31
 80017a0:	2101      	movs	r1, #1
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d13b      	bne.n	8001824 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b2      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
 80017b0:	2302      	movs	r3, #2
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x1a4>
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e00d      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1c0>
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	2202      	movs	r2, #2
 80017f6:	61ba      	str	r2, [r7, #24]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	fa92 f2a2 	rbit	r2, r2
 80017fe:	617a      	str	r2, [r7, #20]
  return(result);
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b252      	sxtb	r2, r2
 8001808:	f042 0220 	orr.w	r2, r2, #32
 800180c:	b252      	sxtb	r2, r2
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f002 021f 	and.w	r2, r2, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e078      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 0203 	bic.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	491a      	ldr	r1, [pc, #104]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001836:	f7fe fd21 	bl	800027c <HAL_GetTick>
 800183a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e00a      	b.n	8001854 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7fe fd1d 	bl	800027c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e060      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_RCC_ClockConfig+0x268>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 020c 	and.w	r2, r3, #12
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	429a      	cmp	r2, r3
 8001864:	d1eb      	bne.n	800183e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d215      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 0207 	bic.w	r2, r3, #7
 800187c:	4906      	ldr	r1, [pc, #24]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RCC_ClockConfig+0x264>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d006      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e03f      	b.n	8001916 <HAL_RCC_ClockConfig+0x2e2>
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_ClockConfig+0x2ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4919      	ldr	r1, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x2ec>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_ClockConfig+0x2ec>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4911      	ldr	r1, [pc, #68]	; (8001920 <HAL_RCC_ClockConfig+0x2ec>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018de:	f000 f825 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018e2:	4601      	mov	r1, r0
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x2ec>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ec:	23f0      	movs	r3, #240	; 0xf0
 80018ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_RCC_ClockConfig+0x2f0>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	fa21 f303 	lsr.w	r3, r1, r3
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_RCC_ClockConfig+0x2f4>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800190e:	2000      	movs	r0, #0
 8001910:	f7fe fc70 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3778      	adds	r7, #120	; 0x78
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	0800380c 	.word	0x0800380c
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x30>
 8001956:	2b08      	cmp	r3, #8
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x36>
 800195a:	e03c      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800195e:	623b      	str	r3, [r7, #32]
      break;
 8001960:	e03c      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001968:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800196c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	607b      	str	r3, [r7, #4]
  return(result);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f003 020f 	and.w	r2, r3, #15
 800198e:	230f      	movs	r3, #15
 8001990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	60fb      	str	r3, [r7, #12]
  return(result);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	e004      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	623b      	str	r3, [r7, #32]
      break;
 80019d4:	e002      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d8:	623b      	str	r3, [r7, #32]
      break;
 80019da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	372c      	adds	r7, #44	; 0x2c
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	080037ec 	.word	0x080037ec
 80019f8:	080037fc 	.word	0x080037fc
 80019fc:	003d0900 	.word	0x003d0900

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a1e:	f7ff ffef 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a22:	4601      	mov	r1, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a2c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a30:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	603b      	str	r3, [r7, #0]
  return(result);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	0800381c 	.word	0x0800381c

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a62:	f7ff ffcd 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a66:	4601      	mov	r1, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a74:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	603b      	str	r3, [r7, #0]
  return(result);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	0800381c 	.word	0x0800381c

08001aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01d      	b.n	8001aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 fb34 	bl	8003134 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 f920 	bl	8001d24 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e01d      	b.n	8001b44 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f815 	bl	8001b4c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f000 f8f5 	bl	8001d24 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_TIM_ConfigClockSource+0x1c>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e0cf      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x1bc>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d07c      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x152>
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d80f      	bhi.n	8001bdc <HAL_TIM_ConfigClockSource+0x7c>
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	f000 808f 	beq.w	8001ce0 <HAL_TIM_ConfigClockSource+0x180>
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d803      	bhi.n	8001bce <HAL_TIM_ConfigClockSource+0x6e>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8083 	beq.w	8001cd2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001bcc:	e09d      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	f000 808d 	beq.w	8001cee <HAL_TIM_ConfigClockSource+0x18e>
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	f000 8091 	beq.w	8001cfc <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001bda:	e096      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001bdc:	2b70      	cmp	r3, #112	; 0x70
 8001bde:	d018      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0xb2>
 8001be0:	2b70      	cmp	r3, #112	; 0x70
 8001be2:	d804      	bhi.n	8001bee <HAL_TIM_ConfigClockSource+0x8e>
 8001be4:	2b50      	cmp	r3, #80	; 0x50
 8001be6:	d044      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x112>
 8001be8:	2b60      	cmp	r3, #96	; 0x60
 8001bea:	d052      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001bec:	e08d      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	d003      	beq.n	8001bfc <HAL_TIM_ConfigClockSource+0x9c>
 8001bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf8:	d028      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001bfa:	e086      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0a:	f023 0307 	bic.w	r3, r3, #7
 8001c0e:	6093      	str	r3, [r2, #8]
    break;
 8001c10:	e07b      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6899      	ldr	r1, [r3, #8]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f000 fb80 	bl	8002326 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	609a      	str	r2, [r3, #8]
    break;
 8001c4a:	e05e      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f000 fb63 	bl	8002326 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c6e:	609a      	str	r2, [r3, #8]
    break;
 8001c70:	e04b      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f000 faca 	bl	8002218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2150      	movs	r1, #80	; 0x50
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fb2b 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001c90:	e03b      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f000 faed 	bl	800227e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2160      	movs	r1, #96	; 0x60
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fb1b 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001cb0:	e02b      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f000 faaa 	bl	8002218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2140      	movs	r1, #64	; 0x40
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb0b 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001cd0:	e01b      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fb04 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001cde:	e014      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fafd 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001cec:	e00d      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 faf6 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001cfa:	e006      	b.n	8001d0a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2130      	movs	r1, #48	; 0x30
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 faef 	bl	80022e6 <TIM_ITRx_SetConfig>
    break;
 8001d08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <TIM_Base_SetConfig+0xe0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <TIM_Base_SetConfig+0x2c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d46:	d003      	beq.n	8001d50 <TIM_Base_SetConfig+0x2c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <TIM_Base_SetConfig+0xe4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <TIM_Base_SetConfig+0xe0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <TIM_Base_SetConfig+0x6e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d00f      	beq.n	8001d92 <TIM_Base_SetConfig+0x6e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <TIM_Base_SetConfig+0xe4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0x6e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <TIM_Base_SetConfig+0xe8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0x6e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <TIM_Base_SetConfig+0xec>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0x6e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <TIM_Base_SetConfig+0xf0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d108      	bne.n	8001da4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <TIM_Base_SetConfig+0xe0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00b      	beq.n	8001de8 <TIM_Base_SetConfig+0xc4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <TIM_Base_SetConfig+0xe8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <TIM_Base_SetConfig+0xc4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <TIM_Base_SetConfig+0xec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <TIM_Base_SetConfig+0xc4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <TIM_Base_SetConfig+0xf0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	615a      	str	r2, [r3, #20]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40014000 	.word	0x40014000
 8001e10:	40014400 	.word	0x40014400
 8001e14:	40014800 	.word	0x40014800

08001e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	f023 0201 	bic.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f023 0302 	bic.w	r3, r3, #2
 8001e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <TIM_OC1_SetConfig+0x108>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00b      	beq.n	8001e9c <TIM_OC1_SetConfig+0x84>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <TIM_OC1_SetConfig+0x10c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_OC1_SetConfig+0x84>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <TIM_OC1_SetConfig+0x110>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_OC1_SetConfig+0x84>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <TIM_OC1_SetConfig+0x114>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10c      	bne.n	8001eb6 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0308 	bic.w	r3, r3, #8
 8001ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <TIM_OC1_SetConfig+0x108>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xbe>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <TIM_OC1_SetConfig+0x10c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xbe>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <TIM_OC1_SetConfig+0x110>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xbe>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <TIM_OC1_SetConfig+0x114>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d111      	bne.n	8001efa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	621a      	str	r2, [r3, #32]
} 
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40014000 	.word	0x40014000
 8001f28:	40014400 	.word	0x40014400
 8001f2c:	40014800 	.word	0x40014800

08001f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f023 0210 	bic.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f023 0320 	bic.w	r3, r3, #32
 8001f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <TIM_OC2_SetConfig+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10d      	bne.n	8001fbc <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a1b      	ldr	r2, [pc, #108]	; (800202c <TIM_OC2_SetConfig+0xfc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00b      	beq.n	8001fdc <TIM_OC2_SetConfig+0xac>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <TIM_OC2_SetConfig+0x100>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <TIM_OC2_SetConfig+0xac>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <TIM_OC2_SetConfig+0x104>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_OC2_SetConfig+0xac>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <TIM_OC2_SetConfig+0x108>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d113      	bne.n	8002004 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fe2:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fea:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800

0800203c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <TIM_OC3_SetConfig+0xf8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10d      	bne.n	80020c6 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <TIM_OC3_SetConfig+0xf8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00b      	beq.n	80020e6 <TIM_OC3_SetConfig+0xaa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <TIM_OC3_SetConfig+0xfc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <TIM_OC3_SetConfig+0xaa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a18      	ldr	r2, [pc, #96]	; (800213c <TIM_OC3_SetConfig+0x100>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d003      	beq.n	80020e6 <TIM_OC3_SetConfig+0xaa>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <TIM_OC3_SetConfig+0x104>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d113      	bne.n	800210e <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020f4:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40014000 	.word	0x40014000
 800213c:	40014400 	.word	0x40014400
 8002140:	40014800 	.word	0x40014800

08002144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002182:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800219e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	031b      	lsls	r3, r3, #12
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <TIM_OC4_SetConfig+0xc4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00b      	beq.n	80021cc <TIM_OC4_SetConfig+0x88>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <TIM_OC4_SetConfig+0xc8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_OC4_SetConfig+0x88>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <TIM_OC4_SetConfig+0xcc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_OC4_SetConfig+0x88>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <TIM_OC4_SetConfig+0xd0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d109      	bne.n	80021e0 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021d2:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	621a      	str	r2, [r3, #32]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40014000 	.word	0x40014000
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800

08002218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f023 0201 	bic.w	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f023 030a 	bic.w	r3, r3, #10
 800225c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	621a      	str	r2, [r3, #32]
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800227e:	b480      	push	{r7}
 8002280:	b087      	sub	sp, #28
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0210 	bic.w	r2, r3, #16
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	031b      	lsls	r3, r3, #12
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	f043 0307 	orr.w	r3, r3, #7
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	609a      	str	r2, [r3, #8]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002344:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	021a      	lsls	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4313      	orrs	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	609a      	str	r2, [r3, #8]
} 
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002382:	2302      	movs	r3, #2
 8002384:	e105      	b.n	8002592 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b14      	cmp	r3, #20
 800239a:	f200 80f0 	bhi.w	800257e <HAL_TIM_PWM_ConfigChannel+0x212>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023f9 	.word	0x080023f9
 80023a8:	0800257f 	.word	0x0800257f
 80023ac:	0800257f 	.word	0x0800257f
 80023b0:	0800257f 	.word	0x0800257f
 80023b4:	08002439 	.word	0x08002439
 80023b8:	0800257f 	.word	0x0800257f
 80023bc:	0800257f 	.word	0x0800257f
 80023c0:	0800257f 	.word	0x0800257f
 80023c4:	0800247b 	.word	0x0800247b
 80023c8:	0800257f 	.word	0x0800257f
 80023cc:	0800257f 	.word	0x0800257f
 80023d0:	0800257f 	.word	0x0800257f
 80023d4:	080024bb 	.word	0x080024bb
 80023d8:	0800257f 	.word	0x0800257f
 80023dc:	0800257f 	.word	0x0800257f
 80023e0:	0800257f 	.word	0x0800257f
 80023e4:	080024fd 	.word	0x080024fd
 80023e8:	0800257f 	.word	0x0800257f
 80023ec:	0800257f 	.word	0x0800257f
 80023f0:	0800257f 	.word	0x0800257f
 80023f4:	0800253d 	.word	0x0800253d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fd0a 	bl	8001e18 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6999      	ldr	r1, [r3, #24]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	619a      	str	r2, [r3, #24]
    }
    break;
 8002436:	e0a3      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fd76 	bl	8001f30 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002452:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6999      	ldr	r1, [r3, #24]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]
    }
    break;
 8002478:	e082      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fddb 	bl	800203c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0208 	orr.w	r2, r2, #8
 8002494:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0204 	bic.w	r2, r2, #4
 80024a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69d9      	ldr	r1, [r3, #28]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]
    }
    break;
 80024b8:	e062      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fe3f 	bl	8002144 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69d9      	ldr	r1, [r3, #28]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	021a      	lsls	r2, r3, #8
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]
    }
    break;
 80024fa:	e041      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f898 	bl	8002638 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800253a:	e021      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f8dc 	bl	8002700 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800257c:	e000      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800257e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e038      	b.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d108      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002600:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
} 
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40012c00 	.word	0x40012c00

08002638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002688:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <TIM_OC5_SetConfig+0xb8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00b      	beq.n	80026b6 <TIM_OC5_SetConfig+0x7e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <TIM_OC5_SetConfig+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <TIM_OC5_SetConfig+0x7e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <TIM_OC5_SetConfig+0xc0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d003      	beq.n	80026b6 <TIM_OC5_SetConfig+0x7e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <TIM_OC5_SetConfig+0xc4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d109      	bne.n	80026ca <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	621a      	str	r2, [r3, #32]
}
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800

08002700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002752:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <TIM_OC6_SetConfig+0xbc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_OC6_SetConfig+0x80>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <TIM_OC6_SetConfig+0xc0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_OC6_SetConfig+0x80>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC6_SetConfig+0xc4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_OC6_SetConfig+0x80>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <TIM_OC6_SetConfig+0xc8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d109      	bne.n	8002794 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	029b      	lsls	r3, r3, #10
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
} 
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800

080027cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e043      	b.n	8002866 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fcf0 	bl	80031d8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f82d 	bl	8002870 <UART_SetConfig>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e022      	b.n	8002866 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f987 	bl	8002b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa0e 	bl	8002c80 <UART_CheckIdleState>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800287c:	2310      	movs	r3, #16
 800287e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002880:	2300      	movs	r3, #0
 8002882:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002884:	2300      	movs	r3, #0
 8002886:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b9f      	ldr	r3, [pc, #636]	; (8002b28 <UART_SetConfig+0x2b8>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a8e      	ldr	r2, [pc, #568]	; (8002b2c <UART_SetConfig+0x2bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d121      	bne.n	800293c <UART_SetConfig+0xcc>
 80028f8:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <UART_SetConfig+0x2c0>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d817      	bhi.n	8002934 <UART_SetConfig+0xc4>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <UART_SetConfig+0x9c>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002929 	.word	0x08002929
 8002914:	0800292f 	.word	0x0800292f
 8002918:	08002923 	.word	0x08002923
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]
 8002920:	e01e      	b.n	8002960 <UART_SetConfig+0xf0>
 8002922:	2302      	movs	r3, #2
 8002924:	75fb      	strb	r3, [r7, #23]
 8002926:	e01b      	b.n	8002960 <UART_SetConfig+0xf0>
 8002928:	2304      	movs	r3, #4
 800292a:	75fb      	strb	r3, [r7, #23]
 800292c:	e018      	b.n	8002960 <UART_SetConfig+0xf0>
 800292e:	2308      	movs	r3, #8
 8002930:	75fb      	strb	r3, [r7, #23]
 8002932:	e015      	b.n	8002960 <UART_SetConfig+0xf0>
 8002934:	2310      	movs	r3, #16
 8002936:	75fb      	strb	r3, [r7, #23]
 8002938:	bf00      	nop
 800293a:	e011      	b.n	8002960 <UART_SetConfig+0xf0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7c      	ldr	r2, [pc, #496]	; (8002b34 <UART_SetConfig+0x2c4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d102      	bne.n	800294c <UART_SetConfig+0xdc>
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
 800294a:	e009      	b.n	8002960 <UART_SetConfig+0xf0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a79      	ldr	r2, [pc, #484]	; (8002b38 <UART_SetConfig+0x2c8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d102      	bne.n	800295c <UART_SetConfig+0xec>
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
 800295a:	e001      	b.n	8002960 <UART_SetConfig+0xf0>
 800295c:	2310      	movs	r3, #16
 800295e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002968:	d16f      	bne.n	8002a4a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d857      	bhi.n	8002a20 <UART_SetConfig+0x1b0>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <UART_SetConfig+0x108>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	0800299d 	.word	0x0800299d
 800297c:	080029b9 	.word	0x080029b9
 8002980:	080029d5 	.word	0x080029d5
 8002984:	08002a21 	.word	0x08002a21
 8002988:	080029ef 	.word	0x080029ef
 800298c:	08002a21 	.word	0x08002a21
 8002990:	08002a21 	.word	0x08002a21
 8002994:	08002a21 	.word	0x08002a21
 8002998:	08002a0b 	.word	0x08002a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800299c:	f7ff f83c 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80029a0:	4603      	mov	r3, r0
 80029a2:	005a      	lsls	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	82bb      	strh	r3, [r7, #20]
        break;
 80029b6:	e036      	b.n	8002a26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029b8:	f7ff f850 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 80029bc:	4603      	mov	r3, r0
 80029be:	005a      	lsls	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	441a      	add	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	82bb      	strh	r3, [r7, #20]
        break;
 80029d2:	e028      	b.n	8002a26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6852      	ldr	r2, [r2, #4]
 80029e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029ea:	82bb      	strh	r3, [r7, #20]
        break;
 80029ec:	e01b      	b.n	8002a26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029ee:	f7fe ff9d 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80029f2:	4603      	mov	r3, r0
 80029f4:	005a      	lsls	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	82bb      	strh	r3, [r7, #20]
        break;
 8002a08:	e00d      	b.n	8002a26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	82bb      	strh	r3, [r7, #20]
        break;
 8002a1e:	e002      	b.n	8002a26 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	74fb      	strb	r3, [r7, #19]
        break;
 8002a24:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002a26:	8abb      	ldrh	r3, [r7, #20]
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a2e:	8abb      	ldrh	r3, [r7, #20]
 8002a30:	105b      	asrs	r3, r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	897a      	ldrh	r2, [r7, #10]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	e069      	b.n	8002b1e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d863      	bhi.n	8002b18 <UART_SetConfig+0x2a8>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <UART_SetConfig+0x1e8>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a7d 	.word	0x08002a7d
 8002a5c:	08002a9d 	.word	0x08002a9d
 8002a60:	08002abd 	.word	0x08002abd
 8002a64:	08002b19 	.word	0x08002b19
 8002a68:	08002add 	.word	0x08002add
 8002a6c:	08002b19 	.word	0x08002b19
 8002a70:	08002b19 	.word	0x08002b19
 8002a74:	08002b19 	.word	0x08002b19
 8002a78:	08002afd 	.word	0x08002afd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a7c:	f7fe ffcc 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60da      	str	r2, [r3, #12]
        break;
 8002a9a:	e040      	b.n	8002b1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a9c:	f7fe ffde 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60da      	str	r2, [r3, #12]
        break;
 8002aba:	e030      	b.n	8002b1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002ac6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6852      	ldr	r2, [r2, #4]
 8002ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60da      	str	r2, [r3, #12]
        break;
 8002ada:	e020      	b.n	8002b1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002adc:	f7fe ff26 	bl	800192c <HAL_RCC_GetSysClockFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60da      	str	r2, [r3, #12]
        break;
 8002afa:	e010      	b.n	8002b1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60da      	str	r2, [r3, #12]
        break;
 8002b16:	e002      	b.n	8002b1e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b1c:	bf00      	nop
    }
  }

  return ret;
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	efff69f3 	.word	0xefff69f3
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40004800 	.word	0x40004800

08002b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01a      	beq.n	8002c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3a:	d10a      	bne.n	8002c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c92:	f7fd faf3 	bl	800027c <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d10e      	bne.n	8002cc4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ca6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f82c 	bl	8002d12 <UART_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e022      	b.n	8002d0a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d10e      	bne.n	8002cf0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f816 	bl	8002d12 <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e00c      	b.n	8002d0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d22:	e02c      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d028      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d32:	f7fd faa3 	bl	800027c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d21d      	bcs.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0c3      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002daa:	f7fd fa0d 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dae:	f000 f817 	bl	8002de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002db2:	f000 f903 	bl	8002fbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002db6:	f000 f8d1 	bl	8002f5c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002dba:	f000 f857 	bl	8002e6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCER|=TIM_CCER_CC1E;//
 8002dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6213      	str	r3, [r2, #32]
  TIM2->CR1|=TIM_CR1_CEN;
 8002dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <main+0x38>

08002de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b090      	sub	sp, #64	; 0x40
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0318 	add.w	r3, r7, #24
 8002dea:	2228      	movs	r2, #40	; 0x28
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fce8 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002e0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e10:	2301      	movs	r3, #1
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e14:	2302      	movs	r3, #2
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8002e1e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fd15 	bl	8000858 <HAL_RCC_OscConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002e34:	f000 f952 	bl	80030dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e38:	230f      	movs	r3, #15
 8002e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8002e40:	2390      	movs	r3, #144	; 0x90
 8002e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fbee 	bl	8001634 <HAL_RCC_ClockConfig>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e5e:	f000 f93d 	bl	80030dc <Error_Handler>
  }
}
 8002e62:	bf00      	nop
 8002e64:	3740      	adds	r7, #64	; 0x40
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	615a      	str	r2, [r3, #20]
 8002e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 499;
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ea8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002eac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002eb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002eba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ec8:	4823      	ldr	r0, [pc, #140]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002eca:	f7fe fde9 	bl	8001aa0 <HAL_TIM_Base_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002ed4:	f000 f902 	bl	80030dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	481c      	ldr	r0, [pc, #112]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ee6:	f7fe fe3b 	bl	8001b60 <HAL_TIM_ConfigClockSource>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002ef0:	f000 f8f4 	bl	80030dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ef4:	4818      	ldr	r0, [pc, #96]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002ef6:	f7fe fdfe 	bl	8001af6 <HAL_TIM_PWM_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002f00:	f000 f8ec 	bl	80030dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	4811      	ldr	r0, [pc, #68]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002f14:	f7ff fb42 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002f1e:	f000 f8dd 	bl	80030dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f22:	2360      	movs	r3, #96	; 0x60
 8002f24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f32:	463b      	mov	r3, r7
 8002f34:	2200      	movs	r2, #0
 8002f36:	4619      	mov	r1, r3
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002f3a:	f7ff fa17 	bl	800236c <HAL_TIM_PWM_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002f44:	f000 f8ca 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MX_TIM2_Init+0xec>)
 8002f4a:	f000 f911 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8002f4e:	bf00      	nop
 8002f50:	3738      	adds	r7, #56	; 0x38
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2000002c 	.word	0x2000002c

08002f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <MX_USART2_UART_Init+0x5c>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f68:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002fa0:	f7ff fc14 	bl	80027cc <HAL_UART_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002faa:	f000 f897 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000006c 	.word	0x2000006c
 8002fb8:	40004400 	.word	0x40004400

08002fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4a3e      	ldr	r2, [pc, #248]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fdc:	6153      	str	r3, [r2, #20]
 8002fde:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	6153      	str	r3, [r2, #20]
 8002ff6:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <MX_GPIO_Init+0x114>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <MX_GPIO_Init+0x114>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4a32      	ldr	r2, [pc, #200]	; (80030d0 <MX_GPIO_Init+0x114>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6153      	str	r3, [r2, #20]
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <MX_GPIO_Init+0x114>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800301a:	2200      	movs	r2, #0
 800301c:	21f8      	movs	r1, #248	; 0xf8
 800301e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003022:	f7fd fbdd 	bl	80007e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin, GPIO_PIN_RESET);
 8003026:	2200      	movs	r2, #0
 8003028:	210b      	movs	r1, #11
 800302a:	482a      	ldr	r0, [pc, #168]	; (80030d4 <MX_GPIO_Init+0x118>)
 800302c:	f7fd fbd8 	bl	80007e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003030:	23f8      	movs	r3, #248	; 0xf8
 8003032:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	2301      	movs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	4619      	mov	r1, r3
 8003046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304a:	f7fd fa53 	bl	80004f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin;
 800304e:	230b      	movs	r3, #11
 8003050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4619      	mov	r1, r3
 8003064:	481b      	ldr	r0, [pc, #108]	; (80030d4 <MX_GPIO_Init+0x118>)
 8003066:	f7fd fa45 	bl	80004f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800306a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800306e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003074:	2302      	movs	r3, #2
 8003076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	4619      	mov	r1, r3
 800307e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003082:	f7fd fa37 	bl	80004f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003086:	2310      	movs	r3, #16
 8003088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800308e:	2302      	movs	r3, #2
 8003090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4619      	mov	r1, r3
 8003098:	480e      	ldr	r0, [pc, #56]	; (80030d4 <MX_GPIO_Init+0x118>)
 800309a:	f7fd fa2b 	bl	80004f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800309e:	23e0      	movs	r3, #224	; 0xe0
 80030a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <MX_GPIO_Init+0x11c>)
 80030a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030a6:	2302      	movs	r3, #2
 80030a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	4619      	mov	r1, r3
 80030b0:	4808      	ldr	r0, [pc, #32]	; (80030d4 <MX_GPIO_Init+0x118>)
 80030b2:	f7fd fa1f 	bl	80004f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2101      	movs	r1, #1
 80030ba:	2017      	movs	r0, #23
 80030bc:	f7fd f9e3 	bl	8000486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030c0:	2017      	movs	r0, #23
 80030c2:	f7fd f9fc 	bl	80004be <HAL_NVIC_EnableIRQ>

}
 80030c6:	bf00      	nop
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	48000400 	.word	0x48000400
 80030d8:	10110000 	.word	0x10110000

080030dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x44>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_MspInit+0x44>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6193      	str	r3, [r2, #24]
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_MspInit+0x44>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_MspInit+0x44>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_MspInit+0x44>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_MspInit+0x44>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d10b      	bne.n	800315e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_TIM_Base_MspInit+0x38>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_TIM_Base_MspInit+0x38>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	61d3      	str	r3, [r2, #28]
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_TIM_Base_MspInit+0x38>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d11c      	bne.n	80031cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_TIM_MspPostInit+0x64>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_TIM_MspPostInit+0x64>)
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	6153      	str	r3, [r2, #20]
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_TIM_MspPostInit+0x64>)
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031aa:	2301      	movs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	4619      	mov	r1, r3
 80031c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c8:	f7fd f994 	bl	80004f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_UART_MspInit+0x80>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d129      	bne.n	800324e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_UART_MspInit+0x84>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_UART_MspInit+0x84>)
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <HAL_UART_MspInit+0x84>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_UART_MspInit+0x84>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_UART_MspInit+0x84>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	6153      	str	r3, [r2, #20]
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_UART_MspInit+0x84>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800322a:	f248 0304 	movw	r3, #32772	; 0x8004
 800322e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800323c:	2307      	movs	r3, #7
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324a:	f7fd f953 	bl	80004f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40004400 	.word	0x40004400
 800325c:	40021000 	.word	0x40021000

08003260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <HardFault_Handler+0x4>

08003274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <MemManage_Handler+0x4>

0800327a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327e:	e7fe      	b.n	800327e <BusFault_Handler+0x4>

08003280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003284:	e7fe      	b.n	8003284 <UsageFault_Handler+0x4>

08003286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b4:	f7fc ffce 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80032c0:	2020      	movs	r0, #32
 80032c2:	f7fd faa5 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80032c6:	2040      	movs	r0, #64	; 0x40
 80032c8:	f7fd faa2 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80032cc:	2080      	movs	r0, #128	; 0x80
 80032ce:	f7fd fa9f 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80032d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032d6:	f7fd fa9b 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80032da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032de:	f7fd fa97 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  if((EXTI->PR & EXTI_PR_PR5) != 0){
 80032e2:	4b91      	ldr	r3, [pc, #580]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d03f      	beq.n	800336e <EXTI9_5_IRQHandler+0xb2>

	    EXTI->PR |= EXTI_PR_PR5;
 80032ee:	4b8e      	ldr	r3, [pc, #568]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4a8d      	ldr	r2, [pc, #564]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80032f4:	f043 0320 	orr.w	r3, r3, #32
 80032f8:	6153      	str	r3, [r2, #20]

	    GPIOB->BSRR = GPIO_BSRR_BS_0;
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 8003300:	4b8a      	ldr	r3, [pc, #552]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003306:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 8003308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800330c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003310:	619a      	str	r2, [r3, #24]

		TIM2->CCR1=5000;
 8003312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 800331c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003320:	f7fc ffb8 	bl	8000294 <HAL_Delay>
		TIM2->CCR1=0;
 8003324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003328:	2200      	movs	r2, #0
 800332a:	635a      	str	r2, [r3, #52]	; 0x34

	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 800332c:	4b7f      	ldr	r3, [pc, #508]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 800332e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003332:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 8003334:	4b7d      	ldr	r3, [pc, #500]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800333a:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_7;
 800333c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003340:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003344:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_6;
 8003346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800334a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800334e:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_5;
 8003350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003354:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003358:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_4;
 800335a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800335e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003362:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 8003364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003368:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800336c:	619a      	str	r2, [r3, #24]

  }

  if((EXTI->PR & EXTI_PR_PR6) != 0){
 800336e:	4b6e      	ldr	r3, [pc, #440]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d065      	beq.n	8003446 <EXTI9_5_IRQHandler+0x18a>

	    EXTI->PR |= EXTI_PR_PR6;
 800337a:	4b6b      	ldr	r3, [pc, #428]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 8003380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003384:	6153      	str	r3, [r2, #20]


	    GPIOB->BSRR = GPIO_BSRR_BS_1;
 8003386:	4b69      	ldr	r3, [pc, #420]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003388:	2202      	movs	r2, #2
 800338a:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 800338c:	4b67      	ldr	r3, [pc, #412]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 800338e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003392:	619a      	str	r2, [r3, #24]

	    if((GPIOB->IDR & GPIO_IDR_4 ) != 0){
 8003394:	4b65      	ldr	r3, [pc, #404]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d014      	beq.n	80033ca <EXTI9_5_IRQHandler+0x10e>

		    GPIOA->BSRR = GPIO_BSRR_BR_7;
 80033a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033a8:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_6;
 80033aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033b2:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_5;
 80033b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033bc:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_4;
 80033be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033c6:	619a      	str	r2, [r3, #24]
 80033c8:	e00f      	b.n	80033ea <EXTI9_5_IRQHandler+0x12e>

	    } else {
		    GPIOA->BSRR = GPIO_BSRR_BS_7;
 80033ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_6;
 80033d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_5;
 80033da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033de:	2220      	movs	r2, #32
 80033e0:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_4;
 80033e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033e6:	2210      	movs	r2, #16
 80033e8:	619a      	str	r2, [r3, #24]
	    }

		TIM2->CCR1=5000;
 80033ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 80033f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033f8:	f7fc ff4c 	bl	8000294 <HAL_Delay>
		TIM2->CCR1=0;
 80033fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800340a:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 800340c:	4b47      	ldr	r3, [pc, #284]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 800340e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003412:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_7;
 8003414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003418:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800341c:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_6;
 800341e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003422:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003426:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_5;
 8003428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800342c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003430:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_4;
 8003432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003436:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800343a:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 800343c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003440:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003444:	619a      	str	r2, [r3, #24]

  }

  if((EXTI->PR & EXTI_PR_PR7) != 0){
 8003446:	4b38      	ldr	r3, [pc, #224]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03e      	beq.n	80034d0 <EXTI9_5_IRQHandler+0x214>

	    EXTI->PR |= EXTI_PR_PR7;
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	6153      	str	r3, [r2, #20]

	    GPIOB->BSRR = GPIO_BSRR_BS_0;
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003460:	2201      	movs	r2, #1
 8003462:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346a:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BS_3;
 800346c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003470:	2208      	movs	r2, #8
 8003472:	619a      	str	r2, [r3, #24]

		TIM2->CCR1=5000;
 8003474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 800347e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003482:	f7fc ff07 	bl	8000294 <HAL_Delay>
		TIM2->CCR1=0;
 8003486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003494:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 8003498:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800349c:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_7;
 800349e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034a6:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_6;
 80034a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80034b0:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_5;
 80034b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034ba:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_4;
 80034bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034c4:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 80034c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034ce:	619a      	str	r2, [r3, #24]

  }

  if((EXTI->PR & EXTI_PR_PR8) != 0){
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d069      	beq.n	80035b0 <EXTI9_5_IRQHandler+0x2f4>
	    EXTI->PR |= EXTI_PR_PR8;
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <EXTI9_5_IRQHandler+0x26c>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e6:	6153      	str	r3, [r2, #20]

	    GPIOB->BSRR = GPIO_BSRR_BS_1;
 80034e8:	4b10      	ldr	r3, [pc, #64]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 80034ea:	2202      	movs	r2, #2
 80034ec:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 80034ee:	4b0f      	ldr	r3, [pc, #60]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 80034f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034f4:	619a      	str	r2, [r3, #24]

	    if((GPIOB->IDR & GPIO_IDR_4 ) != 0){
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <EXTI9_5_IRQHandler+0x270>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <EXTI9_5_IRQHandler+0x274>
		    GPIOA->BSRR = GPIO_BSRR_BR_7;
 8003502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003506:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800350a:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_6;
 800350c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_5;
 8003514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003518:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800351c:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_4;
 800351e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003522:	2210      	movs	r2, #16
 8003524:	619a      	str	r2, [r3, #24]
 8003526:	e015      	b.n	8003554 <EXTI9_5_IRQHandler+0x298>
 8003528:	40010400 	.word	0x40010400
 800352c:	48000400 	.word	0x48000400
	    } else {
		    GPIOA->BSRR = GPIO_BSRR_BS_7;
 8003530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_6;
 8003538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800353c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003540:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_5;
 8003542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003546:	2220      	movs	r2, #32
 8003548:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_4;
 800354a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800354e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003552:	619a      	str	r2, [r3, #24]
	    }


		TIM2->CCR1=5000;
 8003554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 800355e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003562:	f7fc fe97 	bl	8000294 <HAL_Delay>
		TIM2->CCR1=0;
 8003566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800356a:	2200      	movs	r2, #0
 800356c:	635a      	str	r2, [r3, #52]	; 0x34

	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 8003570:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003574:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 8003578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800357c:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_7;
 800357e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003582:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003586:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_6;
 8003588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800358c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003590:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_5;
 8003592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800359a:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_4;
 800359c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035a4:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 80035a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035ae:	619a      	str	r2, [r3, #24]
  }

  if((EXTI->PR & EXTI_PR_PR9) != 0){
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <EXTI9_5_IRQHandler+0x3d4>)
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d065      	beq.n	8003688 <EXTI9_5_IRQHandler+0x3cc>

	    EXTI->PR |= EXTI_PR_PR9;
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <EXTI9_5_IRQHandler+0x3d4>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4a33      	ldr	r2, [pc, #204]	; (8003690 <EXTI9_5_IRQHandler+0x3d4>)
 80035c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c6:	6153      	str	r3, [r2, #20]

	    GPIOB->BSRR = GPIO_BSRR_BS_1;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 80035ca:	2202      	movs	r2, #2
 80035cc:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 80035d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035d4:	619a      	str	r2, [r3, #24]

	    if((GPIOB->IDR & GPIO_IDR_4 ) != 0){
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <EXTI9_5_IRQHandler+0x34c>
		    GPIOA->BSRR = GPIO_BSRR_BR_7;
 80035e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035ea:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_6;
 80035ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035f0:	2240      	movs	r2, #64	; 0x40
 80035f2:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_5;
 80035f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035f8:	2220      	movs	r2, #32
 80035fa:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_4;
 80035fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	e011      	b.n	800362c <EXTI9_5_IRQHandler+0x370>
	    } else {
		    GPIOA->BSRR = GPIO_BSRR_BS_7;
 8003608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_6;
 8003610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003614:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003618:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BR_5;
 800361a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800361e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003622:	619a      	str	r2, [r3, #24]
		    GPIOA->BSRR = GPIO_BSRR_BS_4;
 8003624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003628:	2210      	movs	r2, #16
 800362a:	619a      	str	r2, [r3, #24]
	    }

		TIM2->CCR1=5000;
 800362c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(2000);
 8003636:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800363a:	f7fc fe2b 	bl	8000294 <HAL_Delay>
		TIM2->CCR1=0;
 800363e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003642:	2200      	movs	r2, #0
 8003644:	635a      	str	r2, [r3, #52]	; 0x34


	    GPIOB->BSRR = GPIO_BSRR_BR_1;
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 8003648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800364c:	619a      	str	r2, [r3, #24]
	    GPIOB->BSRR = GPIO_BSRR_BR_0;
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <EXTI9_5_IRQHandler+0x3d0>)
 8003650:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003654:	619a      	str	r2, [r3, #24]

	    GPIOA->BSRR = GPIO_BSRR_BR_7;
 8003656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800365a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800365e:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_6;
 8003660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003664:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003668:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_5;
 800366a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800366e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003672:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_4;
 8003674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003678:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800367c:	619a      	str	r2, [r3, #24]
	    GPIOA->BSRR = GPIO_BSRR_BR_3;
 800367e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003682:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003686:	619a      	str	r2, [r3, #24]
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	48000400 	.word	0x48000400
 8003690:	40010400 	.word	0x40010400

08003694 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003698:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <SystemInit+0x84>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <SystemInit+0x84>)
 80036a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <SystemInit+0x88>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <SystemInit+0x88>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <SystemInit+0x88>)
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4918      	ldr	r1, [pc, #96]	; (800371c <SystemInit+0x88>)
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <SystemInit+0x8c>)
 80036bc:	4013      	ands	r3, r2
 80036be:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <SystemInit+0x88>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <SystemInit+0x88>)
 80036c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <SystemInit+0x88>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a11      	ldr	r2, [pc, #68]	; (800371c <SystemInit+0x88>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <SystemInit+0x88>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a0e      	ldr	r2, [pc, #56]	; (800371c <SystemInit+0x88>)
 80036e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036e6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <SystemInit+0x88>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <SystemInit+0x88>)
 80036ee:	f023 030f 	bic.w	r3, r3, #15
 80036f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <SystemInit+0x88>)
 80036f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f8:	4908      	ldr	r1, [pc, #32]	; (800371c <SystemInit+0x88>)
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <SystemInit+0x90>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <SystemInit+0x88>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SystemInit+0x84>)
 8003708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370c:	609a      	str	r2, [r3, #8]
#endif
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00
 800371c:	40021000 	.word	0x40021000
 8003720:	f87fc00c 	.word	0xf87fc00c
 8003724:	ff00fccc 	.word	0xff00fccc

08003728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800372c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800372e:	e003      	b.n	8003738 <LoopCopyDataInit>

08003730 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003732:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003734:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003736:	3104      	adds	r1, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <LoopForever+0xa>)
	ldr	r3, =_edata
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <LoopForever+0xe>)
	adds	r2, r0, r1
 800373c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800373e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003740:	d3f6      	bcc.n	8003730 <CopyDataInit>
	ldr	r2, =_sbss
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003744:	e002      	b.n	800374c <LoopFillZerobss>

08003746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003746:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003748:	f842 3b04 	str.w	r3, [r2], #4

0800374c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <LoopForever+0x16>)
	cmp	r2, r3
 800374e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003750:	d3f9      	bcc.n	8003746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003752:	f7ff ff9f 	bl	8003694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003756:	f000 f811 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375a:	f7ff fb24 	bl	8002da6 <main>

0800375e <LoopForever>:

LoopForever:
    b LoopForever
 800375e:	e7fe      	b.n	800375e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003760:	20002fff 	.word	0x20002fff
	ldr	r3, =_sidata
 8003764:	0800382c 	.word	0x0800382c
	ldr	r0, =_sdata
 8003768:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800376c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003770:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003774:	200000dc 	.word	0x200000dc

08003778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_2_IRQHandler>
	...

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0d      	ldr	r6, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1ba4      	subs	r4, r4, r6
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2500      	movs	r5, #0
 8003788:	42a5      	cmp	r5, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4e0b      	ldr	r6, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 f820 	bl	80037d4 <_init>
 8003794:	1ba4      	subs	r4, r4, r6
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2500      	movs	r5, #0
 800379a:	42a5      	cmp	r5, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a4:	4798      	blx	r3
 80037a6:	3501      	adds	r5, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ae:	4798      	blx	r3
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	08003824 	.word	0x08003824
 80037b8:	08003824 	.word	0x08003824
 80037bc:	08003824 	.word	0x08003824
 80037c0:	08003828 	.word	0x08003828

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
